
# Predict User Class (Subscriber vs Customer)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Load preprocessed dataset
df = pd.read_csv("bike_trip_history.csv")

# Feature engineering (assumes these steps have already been performed, include if needed)
df['start_time'] = pd.to_datetime(df['start_time'])
df['start_hour'] = df['start_time'].dt.hour
df['day_of_week'] = df['start_time'].dt.day_name()
df['duration_minutes'] = (pd.to_datetime(df['end_time']) - df['start_time']).dt.total_seconds() / 60
df['age'] = 2025 - df['birth_year']

# Drop rows with missing target
df = df.dropna(subset=['user_type'])

# Encode categorical variables
le_user_type = LabelEncoder()
df['user_type_encoded'] = le_user_type.fit_transform(df['user_type'])  # Subscriber=1, Customer=0

# Encode other categorical features
df['gender'] = df['gender'].fillna('Unknown')
df = pd.get_dummies(df, columns=['gender', 'day_of_week'], drop_first=True)

# Select features and target
features = ['start_hour', 'duration_minutes', 'age'] +            [col for col in df.columns if col.startswith('gender_') or col.startswith('day_of_week_')]
X = df[features]
y = df['user_type_encoded']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest classifier
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)

# Predict and evaluate
y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1 Score: {f1:.2f}")
