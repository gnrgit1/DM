# Linear Regression on Boston Housing Prices

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import load_boston
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from statsmodels.stats.outliers_influence import variance_inflation_factor
import statsmodels.api as sm

# Load Boston housing data
boston = load_boston()
df = pd.DataFrame(boston.data, columns=boston.feature_names)
df['PRICE'] = boston.target

# Correlation matrix
corr_matrix = df.corr()
print("Correlation Matrix:")
print(corr_matrix['PRICE'].sort_values(ascending=False))

# Multicollinearity check using VIF
X = df.drop('PRICE', axis=1)
X_with_const = sm.add_constant(X)
vif_data = pd.DataFrame()
vif_data['Feature'] = X.columns
vif_data['VIF'] = [variance_inflation_factor(X_with_const.values, i+1) for i in range(X.shape[1])]
print("\nVariance Inflation Factor (VIF):")
print(vif_data)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, df['PRICE'], test_size=0.2, random_state=42)

# Train model
lr = LinearRegression()
lr.fit(X_train, y_train)

# Predict
y_pred = lr.predict(X_test)

# Evaluation
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

print(f"RÂ² Score: {r2:.2f}")
print(f"Mean Squared Error: {mse:.2f}")
