import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

# Load the dataset (replace with actual file path)
df = pd.read_csv('seattle_bike_data.csv')

# Preprocessing: Extract relevant time-related features
df['timestamp'] = pd.to_datetime(df['timestamp'])
df['hour'] = df['timestamp'].dt.hour
df['day_of_week'] = df['timestamp'].dt.dayofweek
df['month'] = df['timestamp'].dt.month
df['season'] = df['month'].apply(lambda x: 'Spring' if 3 <= x <= 5 else
                                 ('Summer' if 6 <= x <= 8 else
                                  ('Fall' if 9 <= x <= 11 else 'Winter')))

# Extract weather-related and time-related features
features = ['hour', 'day_of_week', 'season', 'temperature', 'humidity', 'windspeed']
X = df[features]
y = df['bicycle_count']

# Encoding categorical features (Season)
X = pd.get_dummies(X, drop_first=True)

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train a Random Forest model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Make predictions
y_pred = model.predict(X_test_scaled)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
print(f'Root Mean Squared Error (RMSE): {rmse:.2f}')

# Visualize predictions vs actual values
plt.figure(figsize=(10, 6))
plt.plot(y_test.reset_index(drop=True), label='Actual Values')
plt.plot(y_pred, label='Predicted Values')
plt.title('Predicted vs Actual Bicycle Trips')
plt.xlabel('Test Data Index')
plt.ylabel('Bicycle Count')
plt.legend()
plt.show()
